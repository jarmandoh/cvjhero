import { Injectable } from '@angular/core';
import { Observable, BehaviorSubject, of } from 'rxjs';
import { delay, map, catchError } from 'rxjs/operators';
import { 
  EmailConfig, 
  EmailTemplate, 
  ContactFormData, 
  EmailResponse, 
  EmailStatus,
  AutoResponder,
  EmailMetrics 
} from '../models/email.model';

@Injectable({
  providedIn: 'root'
})
export class EmailService {
  private readonly STORAGE_KEY = 'cvjhero_email_config';
  private readonly TEMPLATES_KEY = 'cvjhero_email_templates';
  private readonly METRICS_KEY = 'cvjhero_email_metrics';
  private readonly AUTORESPONDER_KEY = 'cvjhero_autoresponder';
  
  private emailConfigSubject = new BehaviorSubject<EmailConfig | null>(null);
  public emailConfig$ = this.emailConfigSubject.asObservable();

  private readonly defaultConfig: EmailConfig = {
    serviceId: 'service_cvjhero',
    templateId: 'template_contact',
    publicKey: 'your_public_key_here'
  };

  private readonly defaultAutoResponder: AutoResponder = {
    enabled: true,
    templateId: 'auto_responder',
    delay: 5,
    subject: 'Gracias por contactar conmigo',
    message: 'He recibido tu mensaje y me pondré en contacto contigo pronto.'
  };

  private readonly defaultMetrics: EmailMetrics = {
    totalSent: 0,
    totalDelivered: 0,
    totalOpened: 0,
    totalClicked: 0,
    totalBounced: 0,
    openRate: 0,
    clickRate: 0,
    bounceRate: 0
  };

  private readonly defaultTemplates: EmailTemplate[] = [
    {
      id: 'contact_form',
      name: 'Formulario de Contacto',
      subject: 'Nuevo mensaje de contacto de {{name}}',
      template: `
        <h2>Nuevo mensaje de contacto</h2>
        <p><strong>Nombre:</strong> {{name}}</p>
        <p><strong>Email:</strong> {{email}}</p>
        <p><strong>Empresa:</strong> {{company}}</p>
        <p><strong>Teléfono:</strong> {{phone}}</p>
        <p><strong>Asunto:</strong> {{subject}}</p>
        <p><strong>Mensaje:</strong></p>
        <div style="background-color: #f5f5f5; padding: 15px; border-left: 4px solid #2563eb;">
          {{message}}
        </div>
        <p><small>Enviado desde: CVJHero Portfolio</small></p>
      `,
      variables: ['name', 'email', 'company', 'phone', 'subject', 'message']
    },
    {
      id: 'auto_responder',
      name: 'Respuesta Automática',
      subject: 'Gracias por contactar conmigo - Janier Hernández',
      template: `
        <h2>¡Hola {{name}}!</h2>
        <p>Gracias por contactar conmigo. He recibido tu mensaje y me pondré en contacto contigo lo antes posible.</p>
        
        <h3>Resumen de tu consulta:</h3>
        <p><strong>Asunto:</strong> {{subject}}</p>
        <p><strong>Mensaje:</strong> {{message}}</p>
        
        <p>Normalmente respondo en un plazo de 24-48 horas durante días laborables.</p>
        
        <div style="background-color: #f0f9ff; padding: 15px; border-radius: 8px; margin: 20px 0;">
          <h4>Mientras tanto, puedes:</h4>
          <ul>
            <li>Revisar mi portafolio y proyectos</li>
            <li>Conectar conmigo en LinkedIn</li>
            <li>Explorar mis servicios disponibles</li>
          </ul>
        </div>
        
        <p>¡Saludos cordiales!</p>
        <p><strong>Janier Hernández</strong><br>
        Desarrollador Full Stack<br>
        <a href="mailto:contact@cvjhero.com">contact@cvjhero.com</a></p>
      `,
      variables: ['name', 'subject', 'message']
    }
  ];

  private get isClient(): boolean {
    return typeof window !== 'undefined';
  }

  private getFromStorage<T>(key: string, defaultValue: T): T {
    if (!this.isClient) return defaultValue;
    try {
      const saved = localStorage.getItem(key);
      return saved ? JSON.parse(saved) : defaultValue;
    } catch {
      return defaultValue;
    }
  }

  private setToStorage<T>(key: string, value: T): boolean {
    if (!this.isClient) return false;
    try {
      localStorage.setItem(key, JSON.stringify(value));
      return true;
    } catch {
      return false;
    }
  }

  constructor() {
    this.initializeConfig();
  }

  private initializeConfig(): void {
    const config = this.getFromStorage(this.STORAGE_KEY, this.defaultConfig);
    this.emailConfigSubject.next(config);
  }

  configureEmail(config: EmailConfig): Observable<boolean> {
    const success = this.setToStorage(this.STORAGE_KEY, config);
    if (success) {
      this.emailConfigSubject.next(config);
    }
    return of(success);
  }

  getConfig(): EmailConfig | null {
    return this.emailConfigSubject.value;
  }

  sendContactForm(formData: ContactFormData): Observable<EmailResponse> {
    return of({
      success: true,
      messageId: 'msg_' + Date.now(),
      timestamp: new Date(),
      details: 'Email sent successfully'
    }).pipe(
      delay(1500),
      map(response => {
        if (response.success) {
          this.updateMetrics(response);
          this.sendAutoResponder(formData);
        }
        return response;
      }),
      catchError(error => of({
        success: false,
        messageId: '',
        timestamp: new Date(),
        details: error.message || 'Error sending email'
      }))
    );
  }

  private sendAutoResponder(formData: ContactFormData): void {
    const autoResponder = this.getAutoResponderConfig();
    if (autoResponder.enabled) {
      console.log('Auto-responder enviado a:', formData.email);
      console.log('Template:', autoResponder.templateId);
    }
  }

  getAutoResponderConfig(): AutoResponder {
    return this.getFromStorage(this.AUTORESPONDER_KEY, this.defaultAutoResponder);
  }

  configureAutoResponder(config: AutoResponder): Observable<boolean> {
    return of(this.setToStorage(this.AUTORESPONDER_KEY, config));
  }

  getEmailTemplates(): EmailTemplate[] {
    return this.getFromStorage(this.TEMPLATES_KEY, this.defaultTemplates);
  }

  saveEmailTemplates(templates: EmailTemplate[]): Observable<boolean> {
    return of(this.setToStorage(this.TEMPLATES_KEY, templates));
  }

  private updateMetrics(response: EmailResponse): void {
    const current = this.getEmailMetrics();
    
    if (response.success) {
      current.totalSent++;
      current.totalDelivered++;
    }
    
    current.openRate = current.totalSent > 0 ? (current.totalOpened / current.totalSent) * 100 : 0;
    current.clickRate = current.totalSent > 0 ? (current.totalClicked / current.totalSent) * 100 : 0;
    current.bounceRate = current.totalSent > 0 ? (current.totalBounced / current.totalSent) * 100 : 0;
    
    this.setToStorage(this.METRICS_KEY, current);
  }

  getEmailMetrics(): EmailMetrics {
    return this.getFromStorage(this.METRICS_KEY, this.defaultMetrics);
  }

  validateEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  getEmailStatus(messageId: string): Observable<EmailStatus> {
    return of({
      sent: true,
      delivered: Math.random() > 0.1,
      opened: Math.random() > 0.3,
      clicked: Math.random() > 0.7,
      bounced: Math.random() > 0.95,
      timestamp: new Date()
    }).pipe(delay(1000));
  }
}